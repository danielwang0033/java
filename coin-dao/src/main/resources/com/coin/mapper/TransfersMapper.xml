<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coin.mapper.TransfersMapper">
  <resultMap id="BaseResultMap" type="com.coin.entity.Transfers">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="from_type" jdbcType="VARCHAR" property="fromType" />
    <result column="from_id" jdbcType="BIGINT" property="fromId" />
    <result column="to_type" jdbcType="VARCHAR" property="toType" />
    <result column="to_id" jdbcType="BIGINT" property="toId" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="status_last" jdbcType="CHAR" property="statusLast" />
    <result column="deposit_id" jdbcType="BIGINT" property="depositId" />
    <result column="withdraw_id" jdbcType="BIGINT" property="withdrawId" />
    <result column="discount" jdbcType="DECIMAL" property="discount" />
    <result column="fee" jdbcType="DECIMAL" property="fee" />
    <result column="uuid" jdbcType="CHAR" property="uuid" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, from_type, from_id, to_type, to_id, status, status_last, deposit_id, withdraw_id, 
    discount, fee, uuid, created_at, updated_at
  </sql>
  <select id="selectByExample" parameterType="com.coin.entity.TransfersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transfers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from transfers
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from transfers
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.coin.entity.TransfersExample">
    delete from transfers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.coin.entity.Transfers">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into transfers (from_type, from_id, to_type, 
      to_id, status, status_last, 
      deposit_id, withdraw_id, discount, 
      fee, uuid, created_at, 
      updated_at)
    values (#{fromType,jdbcType=VARCHAR}, #{fromId,jdbcType=BIGINT}, #{toType,jdbcType=VARCHAR}, 
      #{toId,jdbcType=BIGINT}, #{status,jdbcType=CHAR}, #{statusLast,jdbcType=CHAR}, 
      #{depositId,jdbcType=BIGINT}, #{withdrawId,jdbcType=BIGINT}, #{discount,jdbcType=DECIMAL}, 
      #{fee,jdbcType=DECIMAL}, #{uuid,jdbcType=CHAR}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.coin.entity.Transfers">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into transfers
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fromType != null">
        from_type,
      </if>
      <if test="fromId != null">
        from_id,
      </if>
      <if test="toType != null">
        to_type,
      </if>
      <if test="toId != null">
        to_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="statusLast != null">
        status_last,
      </if>
      <if test="depositId != null">
        deposit_id,
      </if>
      <if test="withdrawId != null">
        withdraw_id,
      </if>
      <if test="discount != null">
        discount,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="uuid != null">
        uuid,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fromType != null">
        #{fromType,jdbcType=VARCHAR},
      </if>
      <if test="fromId != null">
        #{fromId,jdbcType=BIGINT},
      </if>
      <if test="toType != null">
        #{toType,jdbcType=VARCHAR},
      </if>
      <if test="toId != null">
        #{toId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="statusLast != null">
        #{statusLast,jdbcType=CHAR},
      </if>
      <if test="depositId != null">
        #{depositId,jdbcType=BIGINT},
      </if>
      <if test="withdrawId != null">
        #{withdrawId,jdbcType=BIGINT},
      </if>
      <if test="discount != null">
        #{discount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="uuid != null">
        #{uuid,jdbcType=CHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.coin.entity.TransfersExample" resultType="java.lang.Long">
    select count(*) from transfers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update transfers
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.fromType != null">
        from_type = #{row.fromType,jdbcType=VARCHAR},
      </if>
      <if test="row.fromId != null">
        from_id = #{row.fromId,jdbcType=BIGINT},
      </if>
      <if test="row.toType != null">
        to_type = #{row.toType,jdbcType=VARCHAR},
      </if>
      <if test="row.toId != null">
        to_id = #{row.toId,jdbcType=BIGINT},
      </if>
      <if test="row.status != null">
        status = #{row.status,jdbcType=CHAR},
      </if>
      <if test="row.statusLast != null">
        status_last = #{row.statusLast,jdbcType=CHAR},
      </if>
      <if test="row.depositId != null">
        deposit_id = #{row.depositId,jdbcType=BIGINT},
      </if>
      <if test="row.withdrawId != null">
        withdraw_id = #{row.withdrawId,jdbcType=BIGINT},
      </if>
      <if test="row.discount != null">
        discount = #{row.discount,jdbcType=DECIMAL},
      </if>
      <if test="row.fee != null">
        fee = #{row.fee,jdbcType=DECIMAL},
      </if>
      <if test="row.uuid != null">
        uuid = #{row.uuid,jdbcType=CHAR},
      </if>
      <if test="row.createdAt != null">
        created_at = #{row.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updatedAt != null">
        updated_at = #{row.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update transfers
    set id = #{row.id,jdbcType=BIGINT},
      from_type = #{row.fromType,jdbcType=VARCHAR},
      from_id = #{row.fromId,jdbcType=BIGINT},
      to_type = #{row.toType,jdbcType=VARCHAR},
      to_id = #{row.toId,jdbcType=BIGINT},
      status = #{row.status,jdbcType=CHAR},
      status_last = #{row.statusLast,jdbcType=CHAR},
      deposit_id = #{row.depositId,jdbcType=BIGINT},
      withdraw_id = #{row.withdrawId,jdbcType=BIGINT},
      discount = #{row.discount,jdbcType=DECIMAL},
      fee = #{row.fee,jdbcType=DECIMAL},
      uuid = #{row.uuid,jdbcType=CHAR},
      created_at = #{row.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{row.updatedAt,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.coin.entity.Transfers">
    update transfers
    <set>
      <if test="fromType != null">
        from_type = #{fromType,jdbcType=VARCHAR},
      </if>
      <if test="fromId != null">
        from_id = #{fromId,jdbcType=BIGINT},
      </if>
      <if test="toType != null">
        to_type = #{toType,jdbcType=VARCHAR},
      </if>
      <if test="toId != null">
        to_id = #{toId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="statusLast != null">
        status_last = #{statusLast,jdbcType=CHAR},
      </if>
      <if test="depositId != null">
        deposit_id = #{depositId,jdbcType=BIGINT},
      </if>
      <if test="withdrawId != null">
        withdraw_id = #{withdrawId,jdbcType=BIGINT},
      </if>
      <if test="discount != null">
        discount = #{discount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null">
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="uuid != null">
        uuid = #{uuid,jdbcType=CHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.coin.entity.Transfers">
    update transfers
    set from_type = #{fromType,jdbcType=VARCHAR},
      from_id = #{fromId,jdbcType=BIGINT},
      to_type = #{toType,jdbcType=VARCHAR},
      to_id = #{toId,jdbcType=BIGINT},
      status = #{status,jdbcType=CHAR},
      status_last = #{statusLast,jdbcType=CHAR},
      deposit_id = #{depositId,jdbcType=BIGINT},
      withdraw_id = #{withdrawId,jdbcType=BIGINT},
      discount = #{discount,jdbcType=DECIMAL},
      fee = #{fee,jdbcType=DECIMAL},
      uuid = #{uuid,jdbcType=CHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>